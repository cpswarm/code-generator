#set($startIndent = "		")
#!/usr/bin/env python

import rospy
import smach
import smach_ros

from cpswarm_msgs.msg import *
from swarmros.msg import *


# define state Idle
class Idle(smach.State):

	def __init__(self):
		smach.State.__init__(self, outcomes=['succeeded', 'preempted'])

	def execute(self, userdata):
		rospy.loginfo('Executing state Idle')
		while True:
			# Check for preempt
			if self.preempt_requested():
				rospy.loginfo("Idle state has been preempted")
				self.service_preempt()
				return 'preempted'
			rospy.sleep(1.0)
			
		return 'succeeded'
		

def main():
	rospy.init_node('state_machine_node')
	
	# Create a TOP level SMACH state machine
	top_sm = smach.StateMachine(['succeeded', 'preempted', 'aborted'])
	
	# Open the container
	with top_sm:
#foreach($state in $scxml.children)
	#if($state.atomicState)
		#addAtomicToState($state, $startIndent)
	#elseif($state.class.simpleName == "State")
		#compositState($state, $startIndent)
		#addCompositeToState($state, $startIndent)
	#elseif($state.class.simpleName == "Parallel")
		#parallelState($state, $startIndent)
		#addConcurrenceToState($state, $startIndent)
	#end
#end
	
	# Create and start the introspection server (uncomment if needed)
	# sis = smach_ros.IntrospectionServer('smach_server', top_sm, '/SM_TOP')
	# sis.start()
	
	# Execute SMACH plan
	outcome = top_sm.execute()

	# Wait for ctrl-c to stop the application
	rospy.spin()
	# sis.stop()
	
	
if __name__ == '__main__':
	try:
		main()
	except rospy.ROSInterruptException:
		pass
#*************************************************************************************************
*	Generate code for parallel state
*###
#macro(parallelState $state $indent)

${indent}#  ===================================== ${state.id} =====================================
${indent}# Callback for custom outcomes from ${state.id} #
${indent}def out_cb(outcome_map):
	${indent}# To be completed
	${indent}return 'aborted'

${indent}# Create a Concurrence container
${indent}${state.id.toLowerCase()}_concurrence = smach.Concurrence(
#if(!$state.transitionsList.empty)
	${indent}outcomes=[#foreach($transition in $state.transitionsList)'$transition.event'#if($foreach.hasNext), #else, 'aborted'#end#end],
	${indent}default_outcome='$state.transitionsList.get(0).event',
	${indent}child_termination_cb=lambda so: True,
	${indent}outcome_cb=out_cb
${indent})
#else
	${indent}outcomes=['succeeded', 'preempted', 'aborted'],
	${indent}default_outcome='aborted',
	${indent}child_termination_cb=lambda so: True,
	${indent}outcome_cb=out_cb
${indent})
#end

${indent}# Open the container
${indent}with ${state.id.toLowerCase()}_concurrence:
	#foreach($sub_state in $state.children)
		#if($sub_state.atomicState)
			#addAtomicToConcurrence($sub_state, "$indent	")
		#elseif($sub_state.class.simpleName == "State")
			#compositState($sub_state, "$indent	")
			#addCompositeToConcurrence($sub_state, "$indent	")
		#elseif($sub_state.class.simpleName == "Parallel")
			#parallelState($sub_state, "$indent	")
			#addConcurrenceToConcurrence($sub_state, "$indent	")
		#end
	#end
${indent}#  ===================================== ${state.id} END =====================================
#end
#*************************************************************************************************
*	Generate code for composite state
*###
#macro(compositState $state $indent)

${indent}# ===================================== ${state.id} =====================================
${indent}# Create a State Machine container
${indent}${state.id.toLowerCase()}_sm = smach.StateMachine(
	#if(!$state.transitionsList.empty)
	${indent}outcomes=[#foreach($transition in $state.transitionsList)'$transition.event'#if($foreach.hasNext), #end#end]
	#else
	${indent}outcomes=['succeeded', 'preempted', 'aborted']
	#end
${indent})

${indent}# Open the container
${indent}with ${state.id.toLowerCase()}_sm:
	#foreach($sub_state in $state.children)
		#if($sub_state.atomicState)
			#addAtomicToState($sub_state, "$indent	")
		#elseif($sub_state.class.simpleName == "State")
			#compositState($sub_state, "$indent	")
			#addCompositeToState($sub_state, "$indent	")
		#elseif($sub_state.class.simpleName == "Parallel")
			#parallelState($sub_state, "$indent	")
			#addConcurrenceToState($sub_state, "$indent	")
		#end
	#end
${indent}#  ===================================== ${state.id} END =====================================
#end
#*************************************************************************************************
*	Add an Atomic State to a State Machine Container
*###
#macro(addAtomicToState $state $indent)

#if(!$state.invokes.empty)
	#foreach($data in $state.getDatamodel().getData())
		#if($data.getId() == "invoke")
			#set($mappings = false)
			#if($state.invokes[0].type == "ROS_SERVICE")
				#if($data.getParsedValue().getType() == "NODE_LIST")
					#foreach($data_value in $data.getParsedValue().getValue())
						#if($data_value.getNodeName() == "rosservice")
							#set($service_content = $data_value.getChildNodes())
						#elseif($data_value.getNodeName() == "mappings")
							#set($mappings = $data_value.getChildNodes())
						#end
					#end
				#elseif($data.getParsedValue().getType() == "NODE")
					#set($service_content = $data.getParsedValue().getValue().getChildNodes())
				#end
				#set($request_tag = $service_content.getElementsByTagName("request").item(0))
				#set($response_tag = $service_content.getElementsByTagName("response").item(0))
				#if($request_tag.getAttributes().item(0).getNodeValue() == "callback")
					#parse("template/ros/atomic/ROS_service_req_cb.vm")
				#end
				#if($response_tag.getAttributes().item(0).getNodeValue() == "callback")
					#parse("template/ros/atomic/ROS_service_resp_cb.vm")
				#end
			#elseif($state.invokes[0].type == "ROS_ACTION")
				#if($data.getParsedValue().getType() == "NODE_LIST")
					#foreach($data_value in $data.getParsedValue().getValue())
						#if($data_value.getNodeName() == "rosaction")
							#set($action_content = $data_value.getChildNodes())
						#elseif($data_value.getNodeName() == "mappings")
							#set($mappings = $data_value.getChildNodes())
						#end
					#end
				#elseif($data.getParsedValue().getType() == "NODE")
					#set($action_content = $data.getParsedValue().getValue().getChildNodes())
				#end
				#set($goal_tag = $action_content.getElementsByTagName("goal").item(0))
				#set($result_tag = $action_content.getElementsByTagName("result").item(0))
				#if($goal_tag.getAttributes().item(0).getNodeValue() == "callback")
					#parse("template/ros/atomic/ROS_action_goal_cb.vm")
				#end
				#if($result_tag.getAttributes().item(0).getNodeValue() == "callback")
					#parse("template/ros/atomic/ROS_action_result_cb.vm")
				#end
			#end
			#break
		#end
	#end
#end
${indent}# ADD ${state.id} to#if(${state.getParent()}) ${state.getParent().id}#else TOP state#end #
${indent}smach.StateMachine.add('${state.id}',
	#if(!$state.invokes.empty)
		#if($state.invokes[0].type == "ROS_SERVICE")
			#set($continue=true)
			#parse("template/ros/atomic/ROS_service_state.vm")
		#elseif($state.invokes[0].type == "ROS_ACTION")
			#set($continue=true)
			#parse("template/ros/atomic/ROS_action_state.vm")
		#else
	${indent}# NOT_SUPPORTED
		#end
	#else
	${indent}# NOT_SUPPORTED
	#end
	${indent}transitions={#foreach($transition in $state.transitionsList)'$transition.event':'$transition.next'#if($foreach.hasNext), #end#end}#if($mappings),#end
	#if($mappings)
	#set($map_list = $mappings.getElementsByTagName("map"))
	#set($last = $map_list.getLength() - 1)
	${indent}remapping={#foreach($i in [0..$last])'${map_list.item($i).getElementsByTagName("x").item(0).getFirstChild().getNodeValue()}':'${map_list.item($i).getElementsByTagName("y").item(0).getFirstChild().getNodeValue()}'#if($i != $last), #end#end}
	#end
${indent})
#end
#*************************************************************************************************
*	Add a Composite State to a State Machine Container
*###
#macro(addCompositeToState $state $indent)

${indent}# ADD ${state.id} to#if(${state.getParent()}) ${state.getParent().id}#else TOP state#end #
${indent}smach.StateMachine.add('${state.id}',
	${indent}${state.id.toLowerCase()}_sm,
	${indent}transitions={#foreach($transition in $state.transitionsList)'$transition.event':'$transition.next'#if($foreach.hasNext), #end#end}
${indent})
#end
#*************************************************************************************************
*	Add a Concurrence State to a State Machine Container
*###
#macro(addConcurrenceToState $state $indent)

${indent}# ADD ${state.id} to#if(${state.getParent()}) ${state.getParent().id}#else TOP state#end #
${indent}smach.StateMachine.add('${state.id}',
	${indent}${state.id.toLowerCase()}_concurrence,
	${indent}transitions={#foreach($transition in $state.transitionsList)'$transition.event':'$transition.next'#if($foreach.hasNext), #end#end}
${indent})
#end
#*************************************************************************************************
*	Add an Atomic State to a Concurrence Container
*###
#macro(addAtomicToConcurrence $state $indent)

#if(!$state.invokes.empty)
	#foreach($data in $state.getDatamodel().getData())
		#if($data.getId() == "invoke")
			#set($mappings = false)
			#if($state.invokes[0].type == "ROS_SERVICE")
				#if($data.getParsedValue().getType() == "NODE_LIST")
					#foreach($data_value in $data.getParsedValue().getValue())
						#if($data_value.getNodeName() == "rosservice")
							#set($service_content = $data_value.getChildNodes())
						#elseif($data_value.getNodeName() == "mappings")
							#set($mappings = $data_value.getChildNodes())
						#end
					#end
				#elseif($data.getParsedValue().getType() == "NODE")
					#set($service_content = $data.getParsedValue().getValue().getChildNodes())
				#end
				#set($request_tag = $service_content.getElementsByTagName("request").item(0))
				#set($response_tag = $service_content.getElementsByTagName("response").item(0))
				#if($request_tag.getAttributes().item(0).getNodeValue() == "callback")
					#parse("template/ros/atomic/ROS_service_req_cb.vm")
				#end
				#if($response_tag.getAttributes().item(0).getNodeValue() == "callback")
					#parse("template/ros/atomic/ROS_service_resp_cb.vm")
				#end
			#elseif($state.invokes[0].type == "ROS_ACTION")
				#if($data.getParsedValue().getType() == "NODE_LIST")
					#foreach($data_value in $data.getParsedValue().getValue())
						#if($data_value.getNodeName() == "rosaction")
							#set($action_content = $data_value.getChildNodes())
						#elseif($data_value.getNodeName() == "mappings")
							#set($mappings = $data_value.getChildNodes())
						#end
					#end
				#elseif($data.getParsedValue().getType() == "NODE")
					#set($action_content = $data.getParsedValue().getValue().getChildNodes())
				#end
				#set($goal_tag = $action_content.getElementsByTagName("goal").item(0))
				#set($result_tag = $action_content.getElementsByTagName("result").item(0))
				#if($goal_tag.getAttributes().item(0).getNodeValue() == "callback")
					#parse("template/ros/atomic/ROS_action_goal_cb.vm")
				#end
				#if($result_tag.getAttributes().item(0).getNodeValue() == "callback")
					#parse("template/ros/atomic/ROS_action_result_cb.vm")
				#end
			#elseif($state.invokes[0].type == "ROS_MONITOR")
				#set($monitor_content = $data.getParsedValue().getValue().getChildNodes())
			#end
			#break
		#end
	#end
#end
${indent}# ADD ${state.id} to#if(${state.getParent()}) ${state.getParent().id}#else TOP state#end #
${indent}smach.Concurrence.add('${state.id}',
	#if(!$state.invokes.empty)
		#if($state.invokes[0].type == "ROS_SERVICE")
			#set($continue = $mappings)
			#parse("template/ros/atomic/ROS_service_state.vm")
		#elseif($state.invokes[0].type == "ROS_ACTION")
			#set($continue = $mappings)
			#parse("template/ros/atomic/ROS_action_state.vm")
		#elseif($state.invokes[0].type == "ROS_MONITOR")
			#set($continue = false)
			#parse("template/ros/atomic/ROS_monitor_state.vm")
		#else
	${indent}# NOT_SUPPORTED
		#end
	#else
	${indent}# NOT_SUPPORTED
	#end
	#if($mappings)
	#set($map_list = $mappings.getElementsByTagName("map"))
	#set($last = $map_list.getLength() - 1)
	${indent}remapping={#foreach($i in [0..$last])'${map_list.item($i).getElementsByTagName("x").item(0).getFirstChild().getNodeValue()}':'${map_list.item($i).getElementsByTagName("y").item(0).getFirstChild().getNodeValue()}'#if($i != $last), #end#end}
	#end
${indent})
#end
#*************************************************************************************************
*	Add a Composite State to a Concurrence Container
*###
#macro(addCompositeToConcurrence $state $indent)

${indent}# ADD ${state.id} to#if(${state.getParent()}) ${state.getParent().id}#else TOP state#end #
${indent}smach.Concurrence.add('${state.id}', ${state.id.toLowerCase()}_sm)
#end
#*************************************************************************************************
*	Add a Concurrence State to a Concurrence Container
*###
#macro(addConcurrenceToConcurrence $state $indent)

${indent}# ADD ${state.id} to#if(${state.getParent()}) ${state.getParent().id}#else TOP state#end #
${indent}smach.Concurrence.add('${state.id}', ${state.id.toLowerCase()}_concurrence)
#end